"""
üöÄ E-Commerce Sevkiyat Optimizasyon Sistemi
Ana Streamlit Uygulamasƒ±
"""
import streamlit as st
import pandas as pd
from modules.data_loader import DataLoader
from modules.analytics_engine import AnalyticsEngine
from modules.allocation_optimizer import AllocationOptimizer
from modules.alert_manager import AlertManager
from modules.visualizations import Visualizations
from utils.helpers import (
    format_number, format_currency, format_percentage,
    show_success, show_error, show_info
)
from utils.constants import KPI_TARGETS, SEGMENT_COLORS, SEGMENT_EMOJI

# Sayfa konfig√ºrasyonu
st.set_page_config(
    page_title="Sevkiyat Optimizasyonu",
    page_icon="üì¶",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS
st.markdown("""
    <style>
    .main-header {
        font-size: 3rem;
        font-weight: bold;
        text-align: center;
        margin-bottom: 2rem;
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
    }
    .metric-card {
        background-color: #f0f2f6;
        padding: 1.5rem;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .stAlert {
        padding: 1rem;
        border-radius: 5px;
    }
    </style>
""", unsafe_allow_html=True)

# Session state initialization
if 'data_loaded' not in st.session_state:
    st.session_state.data_loaded = False
if 'df' not in st.session_state:
    st.session_state.df = None
if 'analyzed' not in st.session_state:
    st.session_state.analyzed = False

def load_and_analyze_data():
    """Veri y√ºkle ve analiz et"""
    
    with st.spinner('üîÑ Veri y√ºkleniyor ve analiz ediliyor...'):
        # Data loader
        loader = DataLoader()
        df = loader.load_sample_data()
        
        if df is not None:
            # Analytics engine
            analytics = AnalyticsEngine(df)
            df = analytics.calculate_all_metrics()
            df = analytics.segment_products()
            
            # Allocation optimizer
            optimizer = AllocationOptimizer(df)
            allocation_df = optimizer.generate_allocation_strategy()
            
            # Alert manager
            alert_mgr = AlertManager(df, allocation_df)
            alerts_df = alert_mgr.generate_all_alerts()
            
            # Session state'e kaydet
            st.session_state.df = df
            st.session_state.allocation_df = allocation_df
            st.session_state.alerts_df = alerts_df
            st.session_state.analytics = analytics
            st.session_state.optimizer = optimizer
            st.session_state.alert_mgr = alert_mgr
            st.session_state.data_loaded = True
            st.session_state.analyzed = True
            
            show_success("Analiz tamamlandƒ±!")
            return True
        else:
            show_error("Veri y√ºklenemedi!")
            return False

def main():
    """Ana uygulama"""
    
    # Header
    st.markdown('<div class="main-header">üì¶ Sevkiyat Optimizasyonu</div>', unsafe_allow_html=True)
    
    # Sidebar
    with st.sidebar:
        st.image("https://img.icons8.com/fluency/96/000000/rocket.png", width=80)
        st.title("üìä Men√º")
        
        # Veri y√ºkleme butonu
        if st.button("üîÑ Veriyi Y√ºkle ve Analiz Et", use_container_width=True):
            load_and_analyze_data()
        
        st.divider()
        
        # Men√º
        page = st.radio(
            "Sayfalar",
            [
                "üè† Ana Sayfa",
                "üìä Dashboard",
                "üîç √úr√ºn Analizi",
                "üì¶ Sevkiyat Stratejisi",
                "üö® Kritik Uyarƒ±lar",
                "‚öôÔ∏è Ayarlar"
            ],
            label_visibility="collapsed"
        )
        
        # Veri durumu
        st.divider()
        if st.session_state.data_loaded:
            st.success("‚úÖ Veri y√ºkl√º")
            st.caption(f"üì¶ {len(st.session_state.df)} √ºr√ºn")
        else:
            st.warning("‚ö†Ô∏è Veri y√ºklenmedi")
            st.caption("Yukarƒ±daki butona tƒ±klayƒ±n")
    
    # Ana i√ßerik
    if page == "üè† Ana Sayfa":
        show_home_page()
    elif page == "üìä Dashboard":
        if st.session_state.data_loaded:
            show_dashboard_page()
        else:
            st.warning("‚ö†Ô∏è L√ºtfen √∂nce veriyi y√ºkleyin!")
    elif page == "üîç √úr√ºn Analizi":
        if st.session_state.data_loaded:
            show_product_analysis_page()
        else:
            st.warning("‚ö†Ô∏è L√ºtfen √∂nce veriyi y√ºkleyin!")
    elif page == "üì¶ Sevkiyat Stratejisi":
        if st.session_state.data_loaded:
            show_shipment_strategy_page()
        else:
            st.warning("‚ö†Ô∏è L√ºtfen √∂nce veriyi y√ºkleyin!")
    elif page == "üö® Kritik Uyarƒ±lar":
        if st.session_state.data_loaded:
            show_alerts_page()
        else:
            st.warning("‚ö†Ô∏è L√ºtfen √∂nce veriyi y√ºkleyin!")
    elif page == "‚öôÔ∏è Ayarlar":
        show_settings_page()

def show_home_page():
    """Ana sayfa"""
    
    st.markdown("## üëã Ho≈ügeldiniz!")
    
    st.markdown("""
    Bu sistem, e-ticaret operasyonlarƒ±nƒ±zda √ºr√ºn sevkiyatƒ±nƒ± optimize etmek i√ßin geli≈ütirilmi≈ütir.
    
    ### üéØ √ñzellikler:
    
    - **üìä Dashboard**: Genel g√∂r√ºn√ºm ve KPI'lar
    - **üîç √úr√ºn Analizi**: Detaylƒ± √ºr√ºn bazlƒ± analiz
    - **üì¶ Sevkiyat Stratejisi**: Optimal sevkiyat planlarƒ±
    - **üö® Kritik Uyarƒ±lar**: Acil aksiyon gerektiren durumlar
    - **‚öôÔ∏è Ayarlar**: Segment parametrelerini √∂zelle≈ütir
    
    ### üöÄ Ba≈ülamak i√ßin:
    
    1. Sol men√ºden **"Veriyi Y√ºkle ve Analiz Et"** butonuna tƒ±klayƒ±n
    2. Sistem otomatik olarak analizleri √ßalƒ±≈ütƒ±racak
    3. Men√ºden istediƒüiniz sayfaya gidin
    """)
    
    # Quick stats (eƒüer veri y√ºkl√ºyse)
    if st.session_state.data_loaded:
        st.divider()
        st.markdown("### üìà Hƒ±zlƒ± √ñzet")
        
        df = st.session_state.df
        allocation_df = st.session_state.allocation_df
        alerts_df = st.session_state.alerts_df
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                "Toplam √úr√ºn",
                format_number(len(df)),
                help="Sistemdeki toplam √ºr√ºn sayƒ±sƒ±"
            )
        
        with col2:
            hot_count = len(df[df['segment'] == 'HOT'])
            st.metric(
                "üî• HOT √úr√ºnler",
                hot_count,
                help="Hƒ±zlƒ± satan √ºr√ºnler"
            )
        
        with col3:
            critical_count = len(alerts_df[alerts_df['level'] == 'CRITICAL'])
            st.metric(
                "üî¥ Kritik Uyarƒ±",
                critical_count,
                delta=None if critical_count == 0 else f"-{critical_count}",
                delta_color="inverse",
                help="Acil aksiyon gerektiren uyarƒ±lar"
            )
        
        with col4:
            avg_stock_days = df['days_of_stock'].mean()
            st.metric(
                "Ortalama Stok G√ºn√º",
                f"{avg_stock_days:.0f}",
                delta=f"{avg_stock_days - 30:.0f} g√ºn (hedef 30)",
                delta_color="inverse" if avg_stock_days > 30 else "normal",
                help="Mevcut stok ka√ß g√ºne yeter"
            )
    
    # Info boxes
    st.divider()
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.info("""
        **üí° ƒ∞pucu:**  
        Sistem √ºr√ºnleri satƒ±≈ü hƒ±zƒ±na g√∂re 5 segmente ayƒ±rƒ±r:
        - üî• HOT (Patlayanlar)
        - ‚≠ê RISING STAR (Y√ºkselenler)
        - ‚úÖ STEADY (D√ºzenli)
        - üê¢ SLOW (Yava≈ü)
        - üíÄ DYING (√ñlenler)
        """)
    
    with col2:
        st.success("""
        **üéØ Hedefler:**  
        - %30 e-com b√ºy√ºme
        - HOT √ºr√ºnlerde %95 servis seviyesi
        - 35 g√ºnl√ºk ideal stok devri
        - Kontroll√º %10 maksimum markdown
        """)

def show_dashboard_page():
    """Dashboard sayfasƒ±"""
    
    st.markdown("## üìä Executive Dashboard")
    
    df = st.session_state.df
    allocation_df = st.session_state.allocation_df
    analytics = st.session_state.analytics
    viz = Visualizations()
    
    # KPI Cards
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        st.metric(
            "Toplam √úr√ºn",
            format_number(len(df))
        )
    
    with col2:
        total_value = (df['total_stock'] * df['price']).sum()
        st.metric(
            "Stok Deƒüeri",
            format_currency(total_value)
        )
    
    with col3:
        daily_forecast = allocation_df['forecasted_daily_sales'].sum()
        st.metric(
            "G√ºnl√ºk Satƒ±≈ü Tahmini",
            format_number(daily_forecast, 0)
        )
    
    with col4:
        hot_count = len(df[df['segment'] == 'HOT'])
        st.metric(
            "üî• HOT √úr√ºnler",
            hot_count
        )
    
    with col5:
        dying_count = len(df[df['segment'] == 'DYING'])
        st.metric(
            "üíÄ DYING √úr√ºnler",
            dying_count,
            delta=f"-{dying_count}" if dying_count > 0 else None,
            delta_color="inverse"
        )
    
    st.divider()
    
    # Tabs
    tab1, tab2, tab3 = st.tabs(["üìà Genel G√∂r√ºn√ºm", "üìä Segment Analizi", "üè™ Depo Durumu"])
    
    with tab1:
        col1, col2 = st.columns(2)
        
        with col1:
            st.plotly_chart(
                viz.segment_pie_chart(df),
                use_container_width=True
            )
        
        with col2:
            st.plotly_chart(
                viz.velocity_histogram(df),
                use_container_width=True
            )
        
        st.plotly_chart(
            viz.stock_health_scatter(df),
            use_container_width=True
        )
        
        st.plotly_chart(
            viz.category_performance_bar(df),
            use_container_width=True
        )
    
    with tab2:
        segment_summary = analytics.get_segment_summary()
        
        st.markdown("### Segment Performansƒ±")
        st.dataframe(
            segment_summary.style.format({
                'total_stock': '{:,.0f}',
                'stock_value': '‚Ç∫{:,.2f}',
                'avg_velocity': '{:.2f}',
                'avg_trend': '{:.2f}',
                'total_daily_sales': '{:.1f}',
                'avg_days_of_stock': '{:.1f}',
                'avg_final_score': '{:.0f}'
            }),
            use_container_width=True,
            hide_index=True
        )
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("### üî• Top 10 Performans")
            top_df = analytics.get_top_performers(10)
            st.dataframe(top_df, use_container_width=True, hide_index=True)
        
        with col2:
            st.markdown("### üìâ Bottom 10 Performans")
            bottom_df = analytics.get_bottom_performers(10)
            st.dataframe(bottom_df, use_container_width=True, hide_index=True)
    
    with tab3:
        st.plotly_chart(
            viz.depot_stacked_bar(df),
            use_container_width=True
        )
        
        st.plotly_chart(
            viz.transfer_needs_bar(allocation_df),
            use_container_width=True
        )
        
        # Depo √∂zeti
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric(
                "üè¢ Akyazƒ± Stok",
                format_number(df['stock_akyazi'].sum())
            )
        
        with col2:
            st.metric(
                "üè≠ Ana Depo Stok",
                format_number(df['stock_ana_depo'].sum())
            )
        
        with col3:
            st.metric(
                "üè™ OMS Stok",
                format_number(df['stock_oms_total'].sum())
            )

def show_product_analysis_page():
    """√úr√ºn analizi sayfasƒ± (placeholder)"""
    st.markdown("## üîç √úr√ºn Analizi")
    st.info("Bu sayfa yakƒ±nda eklenecek...")

def show_shipment_strategy_page():
    """Sevkiyat stratejisi sayfasƒ± (placeholder)"""
    st.markdown("## üì¶ Sevkiyat Stratejisi")
    st.info("Bu sayfa yakƒ±nda eklenecek...")

def show_alerts_page():
    """Kritik uyarƒ±lar sayfasƒ± (placeholder)"""
    st.markdown("## üö® Kritik Uyarƒ±lar")
    
    alerts_df = st.session_state.alerts_df
    
    if len(alerts_df) == 0:
        st.success("‚úÖ Kritik durum yok! Her ≈üey g√ºzel.")
        return
    
    # Alert √∂zeti
    alert_summary = st.session_state.alert_mgr.get_alert_summary()
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("Toplam Uyarƒ±", alert_summary['total'])
    with col2:
        st.metric("üî¥ CRITICAL", alert_summary['critical'])
    with col3:
        st.metric("üü° WARNING", alert_summary['warning'])
    with col4:
        st.metric("üîµ INFO", alert_summary['info'])
    
    st.divider()
    
    # Alert listesi
    for idx, alert in alerts_df.head(20).iterrows():
        level_emoji = {'CRITICAL': 'üî¥', 'WARNING': 'üü°', 'INFO': 'üîµ'}.get(alert['level'], '‚ö™')
        
        with st.expander(f"{level_emoji} {alert['product_name']} - {alert['message']}", expanded=(idx < 3)):
            col1, col2 = st.columns([2, 1])
            
            with col1:
                st.markdown(f"**√úr√ºn:** {alert['product_name']}")
                st.markdown(f"**SKU:** {alert['sku']}")
                st.markdown(f"**Segment:** {SEGMENT_EMOJI.get(alert['segment'], '‚ùì')} {alert['segment']}")
                st.markdown(f"**Mesaj:** {alert['message']}")
                st.markdown(f"**üëâ Aksiyon:** {alert['action']}")
            
            with col2:
                st.metric("Stok G√ºn√º", f"{alert['days_of_stock']:.1f}")
                st.metric("G√ºnl√ºk Satƒ±≈ü", f"{alert['forecasted_sales']:.1f}")

def show_settings_page():
    """Ayarlar sayfasƒ± (placeholder)"""
    st.markdown("## ‚öôÔ∏è Ayarlar")
    st.info("Bu sayfa yakƒ±nda eklenecek...")

if __name__ == "__main__":
    main()
