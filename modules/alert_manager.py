"""
Alert Manager - Kritik UyarÄ± Sistemi
"""
import pandas as pd
from datetime import datetime

class AlertManager:
    """Kritik durum uyarÄ±larÄ± ve yÃ¶netimi"""
    
    def __init__(self, df, allocation_df):
        """
        Args:
            df: Analytics dataframe
            allocation_df: Allocation strategy dataframe
        """
        self.df = df
        self.allocation_df = allocation_df
        self.alerts = []
    
    def generate_all_alerts(self):
        """TÃ¼m uyarÄ±larÄ± oluÅŸtur"""
        
        self.alerts = []
        
        # 1. Kritik stok uyarÄ±larÄ±
        self._generate_critical_stock_alerts()
        
        # 2. Trend uyarÄ±larÄ±
        self._generate_trend_alerts()
        
        # 3. Markdown uyarÄ±larÄ±
        self._generate_markdown_alerts()
        
        # 4. Stoksuzluk uyarÄ±larÄ±
        self._generate_stockout_alerts()
        
        # 5. Transfer uyarÄ±larÄ±
        self._generate_transfer_alerts()
        
        # DataFrame'e Ã§evir ve Ã¶nceliklendir
        if self.alerts:
            alerts_df = pd.DataFrame(self.alerts)
            alerts_df = self._prioritize_alerts(alerts_df)
            return alerts_df
        else:
            return pd.DataFrame(columns=[
                'level', 'priority', 'category', 'sku', 'product_name',
                'message', 'action', 'created_at'
            ])
    
    def _generate_critical_stock_alerts(self):
        """ðŸ”´ Kritik stok seviyesi uyarÄ±larÄ±"""
        
        critical_products = self.allocation_df[
            (self.allocation_df['days_of_stock'] < 3) &
            (self.allocation_df['segment'].isin(['HOT', 'RISING_STAR']))
        ]
        
        for idx, product in critical_products.iterrows():
            self.alerts.append({
                'level': 'CRITICAL',
                'category': 'STOCK',
                'sku': product['sku'],
                'product_name': product['product_name'],
                'segment': product['segment'],
                'message': f"Kritik stok! Sadece {product['days_of_stock']:.1f} gÃ¼nlÃ¼k stok kaldÄ±. GÃ¼nlÃ¼k satÄ±ÅŸ: {product['forecasted_daily_sales']:.0f}",
                'action': f"ACÄ°L: Ana depodan {product['transfer_from_ana_depo']:.0f} adet transfer baÅŸlat",
                'created_at': datetime.now(),
                'days_of_stock': product['days_of_stock'],
                'forecasted_sales': product['forecasted_daily_sales']
            })
    
    def _generate_trend_alerts(self):
        """ðŸŸ¡ YÃ¼ksek trend uyarÄ±larÄ±"""
        
        trending = self.allocation_df[
            (self.allocation_df['days_of_stock'] < 7) &
            (self.allocation_df['segment'] == 'HOT')
        ]
        
        for idx, product in trending.iterrows():
            # EÄŸer zaten critical alert varsa skip et
            if product['days_of_stock'] < 3:
                continue
                
            self.alerts.append({
                'level': 'WARNING',
                'category': 'TREND',
                'sku': product['sku'],
                'product_name': product['product_name'],
                'segment': product['segment'],
                'message': f"HOT Ã¼rÃ¼n, {product['days_of_stock']:.1f} gÃ¼nlÃ¼k stok var",
                'action': f"Transfer hazÄ±rla: {product['transfer_from_ana_depo']:.0f} adet",
                'created_at': datetime.now(),
                'days_of_stock': product['days_of_stock'],
                'forecasted_sales': product['forecasted_daily_sales']
            })
    
    def _generate_markdown_alerts(self):
        """ðŸ”µ Markdown Ã¶nerileri"""
        
        markdown_urgent = self.allocation_df[
            self.allocation_df['markdown_recommendation'] == 'URGENT'
        ]
        
        for idx, product in markdown_urgent.iterrows():
            # Price bilgisini df'den al
            price = self.df[self.df['sku'] == product['sku']]['price'].iloc[0]
            potential_loss = price * product['current_stock'] * 0.3
            
            self.alerts.append({
                'level': 'INFO',
                'category': 'MARKDOWN',
                'sku': product['sku'],
                'product_name': product['product_name'],
                'segment': product['segment'],
                'message': f"ÃœrÃ¼n Ã¶lÃ¼yor. {product['days_of_stock']:.0f} gÃ¼nlÃ¼k stok fazlasÄ± var",
                'action': f"MARKDOWN baÅŸlat: %30-50 indirim Ã¶ner (Potansiyel kayÄ±p: â‚º{potential_loss:,.0f})",
                'created_at': datetime.now(),
                'days_of_stock': product['days_of_stock'],
                'forecasted_sales': product['forecasted_daily_sales']
            })
    
    def _generate_stockout_alerts(self):
        """ðŸ”´ GeÃ§miÅŸ stoksuzluk uyarÄ±larÄ±"""
        
        frequent_stockouts = self.df[
            (self.df['stock_out_days_last_30d'] > 5) &
            (self.df['segment'].isin(['HOT', 'RISING_STAR', 'STEADY']))
        ]
        
        for idx, product in frequent_stockouts.iterrows():
            self.alerts.append({
                'level': 'WARNING',
                'category': 'STOCKOUT_HISTORY',
                'sku': product['sku'],
                'product_name': product['product_name'],
                'segment': product['segment'],
                'message': f"Son 30 gÃ¼nde {product['stock_out_days_last_30d']} gÃ¼n stoksuzluk yaÅŸandÄ±",
                'action': "Safety stock seviyesini yÃ¼kselt, tedarikÃ§i lead time'Ä± gÃ¶zden geÃ§ir",
                'created_at': datetime.now(),
                'days_of_stock': product['days_of_stock'],
                'forecasted_sales': product['daily_sales_avg_7d']
            })
    
    def _generate_transfer_alerts(self):
        """ðŸŸ¡ BÃ¼yÃ¼k transfer ihtiyacÄ± uyarÄ±larÄ±"""
        
        large_transfers = self.allocation_df[
            (self.allocation_df['transfer_from_ana_depo'] > 100) &
            (self.allocation_df['auto_transfer'] == True)
        ]
        
        for idx, product in large_transfers.iterrows():
            self.alerts.append({
                'level': 'WARNING',
                'category': 'TRANSFER',
                'sku': product['sku'],
                'product_name': product['product_name'],
                'segment': product['segment'],
                'message': f"BÃ¼yÃ¼k transfer ihtiyacÄ±: {product['transfer_from_ana_depo']:.0f} adet",
                'action': f"Transfer planla (Ana Depo â†’ AkyazÄ±). Mevcut AkyazÄ±: {product['stock_akyazi']:.0f}",
                'created_at': datetime.now(),
                'days_of_stock': product['days_of_stock'],
                'forecasted_sales': product['forecasted_daily_sales']
            })
    
    def _prioritize_alerts(self, alerts_df):
        """UyarÄ±larÄ± Ã¶nceliklendir"""
        
        # Priority score hesapla
        priority_map = {
            'CRITICAL': 100,
            'WARNING': 50,
            'INFO': 10
        }
        
        alerts_df['priority_base'] = alerts_df['level'].map(priority_map)
        
        # Days of stock'a gÃ¶re ek Ã¶ncelik
        alerts_df['priority'] = alerts_df['priority_base'] + (
            10 - alerts_df['days_of_stock'].clip(0, 10)
        )
        
        # SÄ±rala: Ã–nce priority, sonra days_of_stock
        alerts_df = alerts_df.sort_values(['priority', 'days_of_stock'], ascending=[False, True])
        
        return alerts_df
    
    def filter_alerts(self, level=None, category=None, segment=None):
        """UyarÄ±larÄ± filtrele"""
        
        if not hasattr(self, 'alerts_df') or self.alerts_df is None:
            return None
        
        filtered = self.alerts_df.copy()
        
        if level:
            if isinstance(level, list):
                filtered = filtered[filtered['level'].isin(level)]
            else:
                filtered = filtered[filtered['level'] == level]
        
        if category:
            if isinstance(category, list):
                filtered = filtered[filtered['category'].isin(category)]
            else:
                filtered = filtered[filtered['category'] == category]
        
        if segment:
            if isinstance(segment, list):
                filtered = filtered[filtered['segment'].isin(segment)]
            else:
                filtered = filtered[filtered['segment'] == segment]
        
        return filtered
    
    def get_alert_summary(self):
        """UyarÄ± Ã¶zeti"""
        
        if not self.alerts:
            alerts_df = self.generate_all_alerts()
        else:
            alerts_df = pd.DataFrame(self.alerts)
        
        if len(alerts_df) == 0:
            return {
                'total': 0,
                'critical': 0,
                'warning': 0,
                'info': 0,
                'by_category': {}
            }
        
        summary = {
            'total': len(alerts_df),
            'critical': len(alerts_df[alerts_df['level'] == 'CRITICAL']),
            'warning': len(alerts_df[alerts_df['level'] == 'WARNING']),
            'info': len(alerts_df[alerts_df['level'] == 'INFO']),
            'by_category': alerts_df['category'].value_counts().to_dict()
        }
        
        return summary
    
    def export_alerts_report(self):
        """Alert raporunu export et"""
        
        if not self.alerts:
            alerts_df = self.generate_all_alerts()
        else:
            alerts_df = pd.DataFrame(self.alerts)
        
        return alerts_df[[
            'level', 'category', 'sku', 'product_name', 'segment',
            'message', 'action', 'created_at'
        ]]
